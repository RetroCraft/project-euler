#include <iostream>
#include <chrono>

/*
  Problem 2: Even Fibonacci numbers

  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
 
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  
  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

// timing: 1272 ns

using namespace std;
int main()
{
  int t_repeat = 1000;
  auto t_start = chrono::high_resolution_clock::now();

  for (int _i = 0; _i < t_repeat; _i++)
  {
    int sum = 0;
    int last = 1, curr = 1, next = 0;
    while (curr < 4e6)
    {
      if (curr % 2 == 0)
        sum += curr;
      next = last + curr;
      last = curr;
      curr = next;
    }
    cout << sum << endl;
  }

  auto t_end = chrono::high_resolution_clock::now();
  int64_t t_elapsed = chrono::duration_cast<chrono::nanoseconds>(t_end - t_start).count();
  cerr << "mean timing: " << t_elapsed / t_repeat << " ns \n";
}
